---
import { fetchMovieDetails } from "@apis/fetchMovieDetails";
import { fetchVideoMovie } from "@apis/fetchVideoMovie";
import YouTubeVideo from "@components/YouTubeVideo.astro";
import { envConfig } from "@src/envConfig";
import Layout from "@src/layouts/Layout.astro";
import type { VideoMovieType } from "@src/types/VideoMovie";
import { transformMinutes } from "@src/utils/transformMinutes";

const { id } = Astro.params;
const { publicImageApi } = envConfig;

if (!id) {
  throw new Error("Movie ID is required");
}

const movieDetails = await fetchMovieDetails(id);
const videos = await fetchVideoMovie(id);
const imagePosterUrl = `${publicImageApi}${movieDetails.poster_path}`;
const imageBackdropUrl = `${publicImageApi}${movieDetails.backdrop_path}`;

// Filtrar y priorizar videos de forma más robusta
let teasers: VideoMovieType["results"] = [];

if (videos && videos.results && videos.results.length > 0) {
  // Primero intentar obtener teasers
  teasers = videos.results
    .filter(
      (video) =>
        video.type === "Teaser" && video.site === "YouTube" && video.key,
    )
    .slice(0, 4);

  // Si no hay teasers suficientes, agregar trailers
  if (teasers.length < 4) {
    const trailers = videos.results
      .filter(
        (video) =>
          video.type === "Trailer" &&
          video.site === "YouTube" &&
          video.key &&
          !teasers.find((t) => t.key === video.key), // Evitar duplicados
      )
      .slice(0, 4 - teasers.length);

    teasers = [...teasers, ...trailers];
  }

  // Si aún no tenemos suficientes, agregar cualquier video de YouTube
  if (teasers.length < 4) {
    const otherVideos = videos.results
      .filter(
        (video) =>
          video.site === "YouTube" &&
          video.key &&
          !teasers.find((t) => t.key === video.key), // Evitar duplicados
      )
      .slice(0, 4 - teasers.length);

    teasers = [...teasers, ...otherVideos];
  }
}
---

<Layout>
  <section class="py-20 space-y-14">
    <div class="fixed inset-0 -z-10 h-full">
      <img
        src={imageBackdropUrl}
        alt={movieDetails.title}
        class="object-cover w-full h-full brightness-20"
      />
    </div>
    <article class="flex gap-3 md:gap-6 w-11/12 max-w-5xl mx-auto">
      <figure
        class="rounded-lg overflow-hidden w-full max-w-[200px] aspect-[2/3] shadow-lg shadow-black h-min"
        transition:name={`image-${id}`}
      >
        <img
          src={imagePosterUrl}
          alt={movieDetails.title}
          class="object-cover w-full h-full"
        />
      </figure>
      <div class="w-full space-y-6">
        <h1 class="font-bold font-arima text-subtitle text-balance">
          {movieDetails.title}
        </h1>
        <div class="flex items-center justify-between">
          <ul class="flex items-center gap-2 flex-wrap ug w-full px-2">
            {
              movieDetails.genres.map((genre) => (
                <li class="border border-gray-300 p-1 px-2 rounded-full inline-block text-gray-300 text-sm lg:text-base">
                  {genre.name}
                </li>
              ))
            }
          </ul>
          <p class="ug w-full text-center px-1">
            {transformMinutes(movieDetails.runtime)}
          </p>
          <p class="ug w-full text-center px-1">{movieDetails.release_date}</p>
        </div>
        <p class="text-gray-400 text-balance">
          {movieDetails.overview}
        </p>
      </div>
    </article>
    <section class="w-11/12 max-w-5xl mx-auto space-y-4">
      <h2 class="text-balance text-2xl font-arima font-semibold">Trailers</h2>
      {
        teasers.length > 0 ? (
          <article>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4 md:gap-6">
              {teasers.map((teaser, index) => (
                <YouTubeVideo
                  videoKey={teaser.key}
                  title={teaser.name}
                  index={index}
                />
              ))}
            </div>
          </article>
        ) : (
          <div class="flex flex-col items-center justify-center py-12 text-center">
            <div class="w-16 h-16 bg-slate-800 rounded-full flex items-center justify-center mb-4">
              <svg
                class="w-8 h-8 text-slate-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                />
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-slate-300 mb-2">
              No hay trailers disponibles
            </h3>
            <p class="text-slate-400">
              No se encontraron videos para esta película.
            </p>
          </div>
        )
      }
    </section>
  </section>

  <style>
    .ug + .ug {
      border-left: 1px solid #4b5563; /* gray-600 */
    }
  </style>
</Layout>
